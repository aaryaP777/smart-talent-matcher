---
- name: Setup environment for Job-Resume Matcher
  hosts: webservers
  become: yes

  tasks:
    # Overwrite sources.list with Jammy repos
    - name: Set Ubuntu Jammy repositories
      copy:
        dest: /etc/apt/sources.list
        content: |
          deb http://archive.ubuntu.com/ubuntu jammy main restricted universe multiverse
          deb http://archive.ubuntu.com/ubuntu jammy-updates main restricted universe multiverse
          deb http://archive.ubuntu.com/ubuntu jammy-backports main restricted universe multiverse
          deb http://security.ubuntu.com/ubuntu jammy-security main restricted universe multiverse

    # Update apt packages
    - name: Update apt repo
      apt:
        update_cache: yes

    # Install Python
    - name: Install Python3, pip, and venv
      apt:
        name:
          - python3
          - python3-pip
          - python3-venv
        state: present

    # Install Node.js and npm
    - name: Install Node.js
      apt:
        name:
          - nodejs
          - npm
        state: present

    # âœ… Install system dependencies for Python packages
    - name: Install system dependencies for Python requirements
      apt:
        name:
          - build-essential # GCC, g++, make
          - libffi-dev # Needed for cryptography/langchain deps
          - libssl-dev # Secure sockets support
          - python3-dev # Headers for Python C extensions
          - libcairo2-dev # Sometimes needed for PyPDF2
          - pkg-config # For compiling C/C++ dependencies
          - git # Some pip installs need git
        state: present

    # Create a deploy user
    - name: Create deploy user
      user:
        name: deploy
        state: present
        create_home: yes
        shell: /bin/bash

    # Copy backend requirements
    - name: Copy backend requirements.txt
      copy:
        src: ../ai-service/requirements.txt
        dest: /home/deploy/requirements.txt
        owner: deploy

    # Create a virtualenv for backend
    - name: Create virtualenv for backend
      command: python3 -m venv /home/deploy/venv
      args:
        creates: /home/deploy/venv
      become: yes

    - name: Fix ownership of venv
      file:
        path: /home/deploy/venv
        owner: deploy
        group: deploy
        recurse: yes

    # Install Python dependencies into venv
    - name: Install Python dependencies
      pip:
        requirements: /home/deploy/requirements.txt
        virtualenv: /home/deploy/venv
        virtualenv_command: python3 -m venv

    # Copy frontend source
    - name: Copy frontend source
      copy:
        src: "{{ playbook_dir }}/../frontend/"
        dest: /home/deploy/frontend/
        owner: deploy
        remote_src: no
